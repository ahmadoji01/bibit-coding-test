// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	movie_grpc "go_bibit_test/movie/delivery/grpc/movie_grpc"
)

// MovieHandlerClient is an autogenerated mock type for the MovieHandlerClient type
type MovieHandlerClient struct {
	mock.Mock
}

// FetchMovie provides a mock function with given fields: ctx, in, opts
func (_m *MovieHandlerClient) FetchMovie(ctx context.Context, in *movie_grpc.FetchRequest, opts ...grpc.CallOption) (movie_grpc.MovieHandler_FetchMovieClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 movie_grpc.MovieHandler_FetchMovieClient
	if rf, ok := ret.Get(0).(func(context.Context, *movie_grpc.FetchRequest, ...grpc.CallOption) movie_grpc.MovieHandler_FetchMovieClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(movie_grpc.MovieHandler_FetchMovieClient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *movie_grpc.FetchRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMovie provides a mock function with given fields: ctx, in, opts
func (_m *MovieHandlerClient) GetMovie(ctx context.Context, in *movie_grpc.SingleRequest, opts ...grpc.CallOption) (*movie_grpc.Movie, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *movie_grpc.Movie
	if rf, ok := ret.Get(0).(func(context.Context, *movie_grpc.SingleRequest, ...grpc.CallOption) *movie_grpc.Movie); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*movie_grpc.Movie)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *movie_grpc.SingleRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
